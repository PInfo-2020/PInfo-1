package domain.service;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.util.ArrayList;

import javax.ws.rs.core.HttpHeaders;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;


@ExtendWith(MockitoExtension.class)
class KeycloakServiceImplTest {
	
	@InjectMocks
	private KeycloakServiceImpl kcService;
	
	String idOfUser = "9dc26618-de06-4862-b947-799fb551d2a4";
	private String Bearer ="Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3WHZWQ2t2anBGYTlCMW1RVUVKLVAyRXYwa1RTMTh1US1zdm5vWEdRSzNnIn0.eyJqdGkiOiJiMjNkNGQ3ZC05ZTYxLTQ4MzgtOTEwZi01YTIzOGFiNGM0NDIiLCJleHAiOjE1OTA3NTc5OTEsIm5iZiI6MCwiaWF0IjoxNTkwNzU3OTMxLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvbWFzdGVyIiwiYXVkIjpbIm1hc3Rlci1yZWFsbSIsImFjY291bnQiXSwic3ViIjoiOWRjMjY2MTgtZGUwNi00ODYyLWI5NDctNzk5ZmI1NTFkMmE0IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoid2ViLXNzbyIsIm5vbmNlIjoiZGJiZmM3MjItNGU4MC00M2VlLTkwMWItOTY2YjU0NGM0NmNmIiwiYXV0aF90aW1lIjoxNTkwNzU3OTMwLCJzZXNzaW9uX3N0YXRlIjoiMjk0MDBmNWYtMTUzMy00NTUxLWJlNjItYTMxOGMzMzczNTNiIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIqIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJjcmVhdGUtcmVhbG0iLCJVc2VyIiwib2ZmbGluZV9hY2Nlc3MiLCJhZG1pbiIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsibWFzdGVyLXJlYWxtIjp7InJvbGVzIjpbInZpZXctcmVhbG0iLCJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJhZG1pbiJ9.YukZ4nb3kZBRmiwG7lYAI4LJY-ruBA2XXtg2uFWvybi6FIX2HsqMGo79vru2u0Rn8ko46VtsstV056Llop66w7r0hDql1TQm8mmcmktxdDf-JFFYj7e1exbIYXRwuV6ttVAUdahzCAnVM-4JUBTBMrAnSQC1UAB0XveN6l-6IBri-YKSgmn0lofPETiPPzpWDXpYuHDYI9QtoaNKOYhWQGfE1sl5PRsHCsm-qWTr3eoy2OtBkX1yclao2JY27RduS1gl8klSAPOAQDc0wJztRmdK1G79W2pPt0UHx6D34_8zk_mf0PKK5ybZ50bFYOCvIvaNuf3RgQLBJrNovvqplA";	
	private String wrongBearer ="Bearer eyJhbGciwOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3WHZWQ2t2anBGYTlCMW1RVUVKLVAyRXYwa1RTMTh1US1zdm5vWEdRSzNnIn0.eyJqdGkiOiJiMjNkNGQ3ZC05ZTYxLTQ4MzgtOTEwZi01YTIzOGFiNGM0NDIiLCJleHAiOjE1OTA3NTc5OTEsIm5iZiI6MCwiaWF0IjoxNTkwNzU3OTMxLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvbWFzdGVyIiwiYXVkIjpbIm1hc3Rlci1yZWFsbSIsImFjY291bnQiXSwic3ViIjoiOWRjMjY2MTgtZGUwNi00ODYyLWI5NDctNzk5ZmI1NTFkMmE0IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoid2ViLXNzbyIsIm5vbmNlIjoiZGJiZmM3MjItNGU4MC00M2VlLTkwMWItOTY2YjU0NGM0NmNmIiwiYXV0aF90aW1lIjoxNTkwNzU3OTMwLCJzZXNzaW9uX3N0YXRlIjoiMjk0MDBmNWYtMTUzMy00NTUxLWJlNjItYTMxOGMzMzczNTNiIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIqIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJjcmVhdGUtcmVhbG0iLCJVc2VyIiwib2ZmbGluZV9hY2Nlc3MiLCJhZG1pbiIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsibWFzdGVyLXJlYWxtIjp7InJvbGVzIjpbInZpZXctcmVhbG0iLCJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJhZG1pbiJ9.YukZ4nb3kZBRmiwG7lYAI4LJY-ruBA2XXtg2uFWvybi6FIX2HsqMGo79vru2u0Rn8ko46VtsstV056Llop66w7r0hDql1TQm8mmcmktxdDf-JFFYj7e1exbIYXRwuV6ttVAUdahzCAnVM-4JUBTBMrAnSQC1UAB0XveN6l-6IBri-YKSgmn0lofPETiPPzpWDXpYuHDYI9QtoaNKOYhWQGfE1sl5PRsHCsm-qWTr3eoy2OtBkX1yclao2JY27RduS1gl8klSAPOAQDc0wJztRmdK1G79W2pPt0UHx6D34_8zk_mf0PKK5ybZ50bFYOCvIvaNuf3RgQLBJrNovvqplA";	

	private String token ="eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3WHZWQ2t2anBGYTlCMW1RVUVKLVAyRXYwa1RTMTh1US1zdm5vWEdRSzNnIn0.eyJqdGkiOiJiMjNkNGQ3ZC05ZTYxLTQ4MzgtOTEwZi01YTIzOGFiNGM0NDIiLCJleHAiOjE1OTA3NTc5OTEsIm5iZiI6MCwiaWF0IjoxNTkwNzU3OTMxLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvbWFzdGVyIiwiYXVkIjpbIm1hc3Rlci1yZWFsbSIsImFjY291bnQiXSwic3ViIjoiOWRjMjY2MTgtZGUwNi00ODYyLWI5NDctNzk5ZmI1NTFkMmE0IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoid2ViLXNzbyIsIm5vbmNlIjoiZGJiZmM3MjItNGU4MC00M2VlLTkwMWItOTY2YjU0NGM0NmNmIiwiYXV0aF90aW1lIjoxNTkwNzU3OTMwLCJzZXNzaW9uX3N0YXRlIjoiMjk0MDBmNWYtMTUzMy00NTUxLWJlNjItYTMxOGMzMzczNTNiIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIqIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJjcmVhdGUtcmVhbG0iLCJVc2VyIiwib2ZmbGluZV9hY2Nlc3MiLCJhZG1pbiIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsibWFzdGVyLXJlYWxtIjp7InJvbGVzIjpbInZpZXctcmVhbG0iLCJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJhZG1pbiJ9.YukZ4nb3kZBRmiwG7lYAI4LJY-ruBA2XXtg2uFWvybi6FIX2HsqMGo79vru2u0Rn8ko46VtsstV056Llop66w7r0hDql1TQm8mmcmktxdDf-JFFYj7e1exbIYXRwuV6ttVAUdahzCAnVM-4JUBTBMrAnSQC1UAB0XveN6l-6IBri-YKSgmn0lofPETiPPzpWDXpYuHDYI9QtoaNKOYhWQGfE1sl5PRsHCsm-qWTr3eoy2OtBkX1yclao2JY27RduS1gl8klSAPOAQDc0wJztRmdK1G79W2pPt0UHx6D34_8zk_mf0PKK5ybZ50bFYOCvIvaNuf3RgQLBJrNovvqplA";	

	
	
	HttpHeaders httpHeaders = mock(HttpHeaders.class);
	ArrayList<String> headers = new ArrayList<String>();


	@Test
	void verifyAuthentificationTest() {
		// If there is an authentification header
		headers.clear();
		headers.add(Bearer);
		when(httpHeaders.getRequestHeader("Authorization")).thenReturn(headers);
		Assertions.assertEquals(true, kcService.verifyAuthentification(httpHeaders));
		
		// If there is no authentification header
		when(httpHeaders.getRequestHeader("Authorization")).thenReturn(new ArrayList<String>());
		Assertions.assertEquals(false, kcService.verifyAuthentification(httpHeaders));
		
		//If the token is wrong
		headers.clear();
		headers.add(wrongBearer);
		when(httpHeaders.getRequestHeader("Authorization")).thenReturn(headers);
		Assertions.assertEquals(false, kcService.verifyAuthentification(httpHeaders));
		
	}
	
	@Test
	void getIdUserTest() {
		String user = kcService.getIdUser(token);
		Assertions.assertEquals(idOfUser, user);
	}
	
	@Test
	void getTokenTest() {
		headers.clear();
		headers.add(Bearer);
		when(httpHeaders.getRequestHeader("Authorization")).thenReturn(headers);
		Assertions.assertEquals(token, kcService.getToken(httpHeaders));
	}
	

}


